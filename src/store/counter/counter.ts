// import { createSlice, PayloadAction } from "@reduxjs/toolkit";
// import { FeatureKey } from "../featureKey";
// import { RootState } from "../reducers";
// /**
//  * Payload
//  */
// export type CounterPayload = {
//   inputNumber: number;
// };
// /**
//  * State
//  */
// export type CounterState = {
//   count: number;
// };
// const initialState: CounterState = {
//   count: 1,
// };
// /**
//  * Slice
//  * @see https://redux-toolkit.js.org/api/createslice
//  */
// const slice = createSlice({
//   name: FeatureKey.COUNTER,
//   initialState,
//   reducers: {
//     increment: (state: CounterState): CounterState => {
//       return {
//         ...state,
//         count: state.count + 1,
//       };
//     },
//     decrement: (state: CounterState): CounterState => {
//       return {
//         ...state,
//         count: state.count - 1,
//       };
//     },
//     calculate: (
//       state: CounterState,
//       action: PayloadAction<CounterPayload>
//     ): CounterState => {
//       const { payload } = action;
//       return {
//         ...state,
//         count: state.count + payload.inputNumber,
//       };
//     },
//   },
// });
// /**
//  * Reducer
//  */
// export const counterReducer = slice.reducer;
// /**
//  * Action
//  */
// export const { increment, decrement, calculate } = slice.actions;
// /**
//  * Selector
//  * @param state CounterState
//  */
// export const counterSelector = (state: RootState): CounterState =>
//   state.counter;
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { AppThunk } from "../configureStore";
import { FeatureKey } from "./../featureKey";
import { RootState } from "./../reducers";
import { fetchCount } from "./counterAPI";

/**
 *
 * State
 **/
export interface CounterState {
  value: number;
  status: "idle" | "loading" | "failed";
}

const initialState: CounterState = {
  value: 0,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

/**
 * Slice
 * */
export const counterSlice = createSlice({
  name: FeatureKey.COUNTER,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

/**
 * Actions
 *
 * */
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

/**
 *
 * Selector
 * */
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

/**
 * Conter Reducer
 * */
export const counterReducer = counterSlice.reducer;
